import asyncio

from aiogram import Router, types, Bot
from aiogram.filters import Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown as md
from pyrogram.raw.functions.messages import DeleteHistory
from pyrogram.raw import functions
from loguru import logger
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ...callback_data.base_callback import MailingAction
from ...keyboards.admin import admin_kbs
from ...keyboards.common import common_kbs
from .....db.models import User
from .....db.requests.base import remove_full_user_data

from chat_scanner.db.models.project.project import Project
from chat_scanner.apps.account.dispatcher import Dispatcher


router = Router()


@router.callback_query(Text("mailing"))
async def mailing(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–ö–æ–≥–æ –±—É–¥–µ–º —Ä–∞—Å—Å—ã–ª–∞—Ç—å?",
        reply_markup=admin_kbs.mailing_choose(),
    )


@router.callback_query(Text(MailingAction.USER))
async def mailing_user(call: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.clear()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.update_data(action=call.data)
    await state.set_state("mailing_user")


@router.message(StateFilter("mailing_user"))
async def mailing_user_send(message: types.Message, session: AsyncSession, bot: Bot, state: FSMContext):
    if message.text.isdigit():
        user_id = int(message.text)
        user = await User.get(session, id=user_id)
    else:
        user = await User.get(session, username=message.text)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.update_data(user_id=user.id)
    await state.set_state("mailing")


@router.callback_query(Text(MailingAction.ALL))
@router.callback_query(Text(MailingAction.SUBSCRIBED))
@router.callback_query(Text(MailingAction.EXPIRED))
async def mailing_all(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.update_data(action=call.data)
    await state.set_state("mailing")


@router.message(StateFilter("mailing"))
async def mailing_send(message: types.Message, session: AsyncSession, bot: Bot, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    action = data.get("action")
    user_id = data.get("user_id")
    if action == MailingAction.USER:
        users = [await User.get(session, id=user_id)]
    elif action == MailingAction.ALL:
        users = await User.all(session)
    elif action == MailingAction.SUBSCRIBED:
        # user subsc duration greater than 0
        results = await session.execute(select(User).where(User.subscription_duration > 0))
        users = results.scalars().unique().all()
    elif action == MailingAction.EXPIRED:
        # user subsc duration less or equal 0
        results = await session.execute(select(User).where(User.subscription_duration <= 0))
        users = results.scalars().unique().all()
    else:
        logger.error("Unknown mailing action: {}", action)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return
    time_emoji1 = "‚è≥ In progress"
    time_emoji2 = "‚åõ In progress"
    done_emoji = "‚úÖ Done"
    current_emoji = time_emoji1

    status_template = f"üì® Total: {{}}\n" \
                      f"‚úÖ Success: {{}}\n" \
                      f"üö´ Failed: {{}}\n\n" \
                      f"{{}}\n"
    status_message = await message.answer(status_template.format(0, 0, 0, current_emoji))
    success = 0
    failed = 0

    async def mailings_status_updated():
        while True:
            try:
                await asyncio.sleep(5)
                nonlocal current_emoji
                current_emoji = time_emoji1 if current_emoji == time_emoji2 else time_emoji2
                await status_message.edit_text(
                    status_template.format(
                        md.hcode(success + failed),
                        md.hcode(success),
                        md.hcode(failed),
                        current_emoji
                    )
                )
            except Exception as status_change_error:
                logger.warning(f"[MAILING] Status-change-error: {status_change_error}")

    task = asyncio.create_task(mailings_status_updated())
    action_errors = []
    ignore_errors = [
        'peer_id_invalid',
        'user is deactivated',
        'chat not found',
        'bot was blocked by the user',
        'user_is_bot'
    ]
    # copy message
    for num, user in enumerate(users, 1):
        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –º–æ–∂–µ–º –ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ====
        # –¶–∏–∫–ª –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –º—ã –Ω–µ —É–∑–Ω–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –Ω–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç
        # –ù–∞ —Ç–æ —á—Ç–æ–±—ã —ç—Ç–æ —É–∑–Ω–∞—Ç—å —É –Ω–∞—Å –±—É–¥–µ—Ç 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ï—Å–ª–∏ –º—ã –Ω–µ —É–∑–Ω–∞–µ–º –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - —Ç–æ –ø–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        repeats = 0
        success_flag = False

        # logger.warning(f'[MAILING] UserId-mailing: {user.id}')

        while True:
            try:
                await bot.send_chat_action(user.id, action='typing')  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—à–Ω –ø–µ—á–∞–∞—Ç–µ—Ç...
                success_flag = True
                break
            except Exception as error:
                # logger.warning(f"[MAILING] Bad mailing ({user.id}) with error: {error}")
                # if any([action_error in str(error).lower() for action_error in
                #         action_errors]):  # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ç–æ
                #     failed += 1  # –î–æ–±–∞–≤–∏—Ç—å 1 –∫ –æ—à–∏–±–∫–∞–º –æ—Ç–ø—Ä–∞–≤–∫–∏
                #     # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                #     await remove_full_user_data(session=session, user_id=user.id)
                #     break

                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–∞–∑—Ä—è–¥–∞ IGNORE-ERRORS - —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if any([ignore_error in str(error).lower() for ignore_error in ignore_errors]):
                    failed += 1
                    break
                else:  # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–æ –≤–∑—è—Ç—å –ø–∞—É–∑—É –Ω–∞ 2 –º–∏–Ω—É—Ç—ã (–ø—Ä–∏–º–µ—Ä –æ–∏—à–∫–±–∏ - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
                    repeats += 1
                    # logger.warning(
                    #     f"Undetected error "
                    #     f"(try: {repeats}) in mailing "
                    #     f"from telegram: {error}\n\n"
                    #     f"Data: id: {user.id}"
                    # )
                    await message.answer(
                        f"Undetected error "
                        f"(try: {repeats}) in mailing "
                        f"from telegram: {str(error).replace('<', '-')}\n\n"
                        f"Data: id: {user.id}"
                    )
                    if repeats >= 2:
                        break
                    await asyncio.sleep(60 * 2)  # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ç–µ–ª–µ–≥–∞ –æ—Ç–¥–∞–ª–∞ –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É - —Ç–æ 2 –º–∏–Ω –ø–µ—Ä–µ—Ä—ã–≤–∞

        if not success_flag:  # –ï—Å–ª–∏ –º—ã –Ω–µ –º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - —Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ
            continue

        try:
            await bot.copy_message(
                user.id,
                message.chat.id,
                message.message_id,
            )
            success += 1
        except Exception as e:
            # logger.warning(f"[MAILING] Error while sending message to {user.id}: {e}")
            failed += 1
        await asyncio.sleep(0.17)
    task.cancel()
    try:
        await status_message.edit_text(
            status_template.format(
                md.hcode(success + failed),
                md.hcode(success),
                md.hcode(failed),
                done_emoji,
            )
        )
    except Exception as error:
        pass
        # logger.warning(f"[MAILING] Edit-text-error: {error}")  –æ—Ç–ø—Ä–∞–≤–ª—è–π

    await message.answer(
        f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n'
        f'Total: {success + failed}\n'
        f'Succes: {success}\n'
        f'Failed: {failed}'
    )
    # await state.clear()


@router.callback_query(Text(MailingAction.DELETE_BLOCKED))
async def delete_block_users(
        call: types.CallbackQuery,
        session: AsyncSession,
        bot: Bot,
        account_dispatchers: dict[int, Dispatcher]

):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å action TYPING"""

    blocked = 0
    checked = 0
    template = f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...\n\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {checked}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {blocked}"
    msg = await bot.send_message(
        call.from_user.id,
        template
    )
    users = await User.all(session)
    action_errors = [
        'user is deactivated',
        'chat not found',
        'bot was blocked by the user',
        'user_is_bot',
        'peer_id_invalid'
    ]
    ignore_errors = []
    for num, user in enumerate(users, 1):
        repeats = 0
        success_flag = False
        checked += 1

        if checked % 10 == 0 or checked == 1:  # –û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await msg.edit_text(
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ–µ...\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked}"
            )

        while True:
            try:
                await bot.send_chat_action(user.id, action='typing')  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—à–Ω –ø–µ—á–∞–∞—Ç–µ—Ç...
                success_flag = True
                break
            except Exception as error:
                if any([action_error in str(error).lower() for action_error in action_errors]):  # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ç–æ
                    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    try:
                        status = await remove_full_user_data(
                            session=session,
                            user_id=user.id,
                            bot=bot,
                            account_dispatchers=account_dispatchers,
                            remove_user=True
                        )
                        if status:
                            blocked += 1  # –î–æ–±–∞–≤–∏—Ç—å 1 –∫ –æ—à–∏–±–∫–∞–º –æ—Ç–ø—Ä–∞–≤–∫–∏
                    except Exception:
                        pass
                    #  await bot.send_message(
                    #     call.from_user.id,
                    #     f"User is blocked: {user.id}\nStatus: {status}"
                    # )
                    break
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–∞–∑—Ä—è–¥–∞ IGNORE-ERRORS - —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                elif any([ignore_error in str(error).lower() for ignore_error in ignore_errors]):
                    break
                else:
                    repeats += 1
                    # logger.warning(
                    #     f"Undetected error "
                    #     f"(try: {repeats}) in mailing "
                    #     f"from telegram: {error}\n\n"
                    #     f"Data: id: {user.id}"
                    # )
                    await bot.send_message(
                        call.from_user.id,
                        f"Undetected error "
                        f"(try: {repeats}) in mailing "
                        f"from telegram: {str(error).replace('<', '-')}\n\n"
                        f"Data: id: {user.id}"
                    )
                    if repeats >= 2:
                        break
                    await asyncio.sleep(60 * 2)  # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ç–µ–ª–µ–≥–∞ –æ—Ç–¥–∞–ª–∞ –¥—Ä—É–≥—É—é –æ—à–∏–±–∫—É - —Ç–æ 2 –º–∏–Ω –ø–µ—Ä–µ—Ä—ã–≤–∞

        if not success_flag:  # –ï—Å–ª–∏ –º—ã –Ω–µ –º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - —Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ
            continue

    await msg.edit_text(
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked}"
    )


@router.callback_query(Text(MailingAction.EXIT_FROM_CHAT))  #—Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä—É—é —è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª, –Ω–æ –æ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
async def exit_from_inactive_chats(
        call: types.CallbackQuery,
        session: AsyncSession,
        user: User,
        bot: Bot,
        account_dispatchers: dict[int, Dispatcher]
):
    logger.warning(f'[AUTO-EXIT] function starting')

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    checked = 0
    exits_from_chats = 0
    failed_leaves = 0
    failed_exits = ''  # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ —é–∑–µ—Ä–±–æ—Ç–∞–º

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    msg = await bot.send_message(
        user.id,
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...\n\n"
        f"–ß–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}\n"
        f"–ß–∞—Ç–æ–≤ –ø–æ–∫–∏–Ω—É—Ç–æ: {exits_from_chats}\n"
        f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–π—Ç–∏: {failed_leaves}"
    )

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –¥–∏–ø–∞—Ç—á–µ—Ä–∞
    accounts = sorted(list(account_dispatchers.keys()))
    i = 0
    for account_id, dispatcher in sorted(account_dispatchers.items()):
        i += 1
        async for dialog in dispatcher.client.get_dialogs():  # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —á–∞—Ç–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞ (—é–∑–µ—Ä–±–æ—Ç–∞)
            checked += 1
            # logger.warning(f'[DIALOG] id - {dialog.chat.id}') –∂–µ
            await asyncio.sleep(0.13)
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Ç–∞–∫–∏–º–∂–µ –¥–∏–∞–ª–æ–≥–æ–º –≤ —Å–µ–Ω–¥–µ—Ä–∞—Ö —É —é–∑–µ—Ä–±–æ—Ç–∞
            dialog_type = str(dialog.chat.type).lower()
            topic_ids = []
            if 'supergroup' in dialog_type:
                chat = await dispatcher.client.resolve_peer(dialog.chat.id)
                try:
                    topics = await dispatcher.client.invoke(
                        functions.channels.GetForumTopics(
                            channel=chat,
                            offset_date=0,
                            offset_topic=0,
                            offset_id=0,
                            limit=0
                        )
                    )
                    if topics.count > 0:
                        for topic in topics.topics:
                            topic_id = topic.id
                            topic_ids.append(topic_id)
                except Exception:
                    pass

            if topic_ids:  # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏—á–∞—Ç—ã —Ç–æ —Å–æ–±—Ä–∞—Ç—å –∏–∑ –±–∞–∑—ã –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –º–∏–Ω–∏—á–∞—Ç–∞–º–∏
                project_senders_with_dialog_id = []
                for topic_id in topic_ids:
                    project_senders_with_topic_dialog_id = await Project.filter(
                        session,
                        Project.sender_id == int(str(dialog.chat.id) + str(topic_id)),
                        Project.account_id == account_id,
                        # Project.is_general == False
                    )
                    if project_senders_with_topic_dialog_id:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ –ø—Ä–æ–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º –º–∏–Ω–∏—á–∞—Ç–æ–º
                        project_senders_with_dialog_id.extend(project_senders_with_topic_dialog_id)
                        break
            else:
                project_senders_with_dialog_id = await Project.filter(
                    session,
                    Project.sender_id == dialog.chat.id,
                    Project.account_id == account_id,
                    # Project.is_general == False
                )

            # logger.warning(f'[PROJECTS-DIALOG] dialog ({dialog.chat.id}), len ({len(project_senders_with_dialog_id)})')
            # –ï—Å–ª–∏ —Ç–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–π —á–∞—Ç - —ç—Ç–æ –ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ - —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥
            # –ù–æ –µ—Å–ª–∏ —ç—Ç–æ –±–æ—Ç - —Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ –∏ –æ—á–∏—Å—Ç–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
            if project_senders_with_dialog_id or 'private' in dialog_type or 'bot' in dialog_type:
                if 'bot' in dialog_type:
                    # logger.warning(f'[BOT-DIALOG] {dialog}')
                    try:
                        try:
                            await dispatcher.client.block_user(dialog.chat.id)
                        except Exception:
                            pass
                        peer = await dispatcher.client.resolve_peer(dialog.chat.id)
                        await dispatcher.client.invoke(DeleteHistory(max_id=0, peer=peer))
                        exits_from_chats += 1
                    except Exception as error:
                        pass
                        # logger.warning(f"[DELETE-BOT] error: {error}")
                if checked % 10 == 0 or checked == 1:  # –û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã—Ö —á–∞—Ç–æ–≤
                    await msg.edit_text(
                        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ({account_id}/{i}/{len(accounts)})...\n\n"
                        f"–ß–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}\n"
                        f"–ß–∞—Ç–æ–≤ –ø–æ–∫–∏–Ω—É—Ç–æ: {exits_from_chats}\n"
                        f"–ù–µ—É–¥–∞—á–Ω—ã–π –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–π—Ç–∏: {failed_leaves}\n"
                    )
                continue

            # –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
            try:
                await dispatcher.client.leave_chat(dialog.chat.id, delete=True)  # –Æ–∑–µ—Ä–±–æ—Ç –ø–æ–∫–∏–¥–∞–µ—Ç —á–∞—Ç
                exits_from_chats += 1
            except Exception:
                failed_leaves += 1
                failed_exits += f"USERBOT: {account_id}, " \
                                f"Chat: " \
                                f"id-{dialog.chat.id} " \
                                f"title-{dialog.chat.title} " \
                                f"username-{dialog.chat.username}\n"

            if checked % 10 == 0 or checked == 1:  # –û–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã—Ö —á–∞—Ç–æ–≤
                await msg.edit_text(
                    f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ({account_id}/{i}/{len(accounts)})...\n\n"
                    f"–ß–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}\n"
                    f"–ß–∞—Ç–æ–≤ –ø–æ–∫–∏–Ω—É—Ç–æ: {exits_from_chats}\n"
                    f"–ù–µ—É–¥–∞—á–Ω—ã–π –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–π—Ç–∏: {failed_leaves}\n"
                )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è
    await msg.edit_text(
        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
        f"–ß–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}\n"
        f"–ß–∞—Ç–æ–≤ –ø–æ–∫–∏–Ω—É—Ç–æ: {exits_from_chats}\n"
        f"–ù–µ—É–¥–∞—á–Ω—ã–π –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–π—Ç–∏: {failed_leaves}"
    )
    await asyncio.sleep(0.13)

    await bot.send_message(
        call.from_user.id,
        text=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
             f"–ß–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}\n"
             f"–ß–∞—Ç–æ–≤ –ø–æ–∫–∏–Ω—É—Ç–æ: {exits_from_chats}\n"
             f"–ù–µ—É–¥–∞—á–Ω—ã–π –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–π—Ç–∏: {failed_leaves}\n\n"
             f"–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
             f"{failed_exits}"  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    )

