import traceback

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, Text, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from chat_scanner.apps.account.dispatcher import Dispatcher
from chat_scanner.config import Settings
from chat_scanner.db.models import User, Invoice, InvoiceStatus
from chat_scanner.utils.parser_csv import create_from_csv
from ...callback_data.base_callback import UserCallback, AdminAction, SubscriptionCallback
from ...commands.bot_commands import AdminCommands
from ...keyboards.admin import admin_kbs
from ...keyboards.common import common_kbs

router = Router()

async def get_user_info(user: User, session: AsyncSession) -> str:
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    results = await session.execute(
        select(Invoice)
        .where(Invoice.user_id == user.id)
        .where(Invoice.status == InvoiceStatus.SUCCESS)
        .order_by(Invoice.id.desc()).limit(5)
    )
    invoices: list[Invoice] = results.scalars().all()
    invoices_str = ""
    for invoice in invoices:
        invoices_str += f"{invoice.get_admin_text()}\n"
    ban_status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.ban else "–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    info = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n"
        f"<b>ID:</b> {user.id}\n"
        f"<b>Username:</b> @{user.username}\n"
        f"<b>–¢–∞—Ä–∏—Ñ:</b> {user.rate}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {ban_status}\n"
        f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user.balance} —Ä\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {user.subscription_duration} –¥–Ω–µ–π\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n"
        f"{invoices_str}"
    )
    return info


@router.callback_query(Text("admin"))
@router.message(Command(AdminCommands.ADMIN))
async def admin_start(message: types.CallbackQuery | types.Message, settings: Settings, state: FSMContext):
    await state.clear()
    if isinstance(message, types.CallbackQuery):
        message = message.message
    await message.delete()
    await message.answer(
        f"<b>üë®‚Äçüíª–ê–¥–º–∏–Ω –º–µ–Ω—é\n</b>"
        f"–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å: {settings.bot.BONUS}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏: {settings.bot.REFERRAL_PERCENT} %\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {settings.bot.WITHDRAW_BALANCE}\n",
        reply_markup=admin_kbs.admin_start()
    )


@router.callback_query(Text("texts_menu"))
async def handle_texts_menu(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤",
        reply_markup=admin_kbs.texts_menu(),
    )

@router.callback_query(Text("change_support_chat"))
async def change_support_chat(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ id —á–∞—Ç–∞",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("change_support_chat")


@router.message(StateFilter("change_support_chat"))
async def change_support_chat(message: types.Message, settings: Settings, state: FSMContext):
    try:
        chat_id = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id —á–∞—Ç–∞")
        return
    settings.bot.SUPPORT_CHAT_ID = chat_id
    await message.answer(
        f"–°–ª—É–∂–µ–±–Ω—ã–π —á–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {chat_id}",
        reply_markup=admin_kbs.admin_start()
    )
    settings.dump()
    await state.clear()


@router.callback_query(Text("change_ref_percent"))
async def change_ref_percent(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("change_ref_percent")


@router.message(StateFilter("change_ref_percent"))
async def change_ref_percent(message: types.Message, settings: Settings, state: FSMContext):
    try:
        percent = float(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞")
        return
    settings.bot.REFERRAL_PERCENT = percent
    await message.answer(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {percent} %",
        reply_markup=admin_kbs.admin_start()
    )
    settings.dump()
    await state.clear()


@router.callback_query(UserCallback.filter(F.action == AdminAction.WANT_GET))
async def admin_get_user(message: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await message.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("admin_get_user")


# @router.message(StateFilter("admin_get_user"))
# @router.callback_query(UserCallback.filter(F.action == AdminAction.GET))
# async def admin_get_user(message: types.Message, session: AsyncSession, state: FSMContext,
#                          callback_data: UserCallback = None):
#     if isinstance(message, types.CallbackQuery):
#         message = message.message
#     # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
#     search_text = message.text
#
#     # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     if search_text.isdigit():
#         user = await User.get(session, id=int(message.text))
#     else:
#         users = await User.filter(
#             session,
#             func.lower(User.username) == func.lower(search_text.replace('@', ''))
#         )
#         # user = await User.get(session, username=search_text.replace("@", ""))
#         if users:
#             user = users[0]
#         else:
#             user = None
#
#     if user:
#         #user = user[0]
#         # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
#         results = await session.execute(
#             select(Invoice)
#             .where(Invoice.user_id == user.id)
#             .where(Invoice.status == InvoiceStatus.SUCCESS)
#             .order_by(Invoice.id.desc()).limit(5)
#         )
#         invoices: list[Invoice] = results.scalars().all()
#         invoices_str = ""
#         for invoice in invoices:
#             invoices_str += f"{invoice.get_admin_text()}\n"
#         ban_status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.ban else "–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
#         info = (
#             f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n"
#             f"<b>ID:</b> {user.id}\n"
#             f"<b>Username:</b> @{user.username}\n"
#             f"<b>–¢–∞—Ä–∏—Ñ:</b> {user.rate}\n"
#             f"<b>–°—Ç–∞—Ç—É—Å:</b> {ban_status}\n"
#             f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user.balance} —Ä\n"
#             f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {user.subscription_duration} –¥–Ω–µ–π\n"
#             f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n"
#             f"{invoices_str}"
#         )
#         await message.answer(info, reply_markup=admin_kbs.get_user(user.id))
#     await state.clear()

@router.message(StateFilter("admin_get_user"))
@router.callback_query(UserCallback.filter(F.action == AdminAction.GET))
async def admin_get_user(message: types.Message, session: AsyncSession, state: FSMContext,
                         callback_data: UserCallback = None):
    if isinstance(message, types.CallbackQuery):
        message = message.message
    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    search_text = message.text

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if search_text.isdigit():
        user = await User.get(session, id=int(message.text))
    else:
        users = await User.filter(
            session,
            func.lower(User.username) == func.lower(search_text.replace('@', ''))
        )
        if users:
            user = users[0]
        else:
            user = None

    if user:
        info = await get_user_info(user, session)
        await message.answer(info, reply_markup=admin_kbs.get_user(user.id))
    await state.clear()


@router.callback_query(UserCallback.filter(F.action == AdminAction.SEND_MESSAGE))
async def admin_send_message(call: types.CallbackQuery, callback_data: UserCallback, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("admin_send_message")
    await state.update_data(bot_user_id=callback_data.id)


@router.message(StateFilter("admin_send_message"))
async def admin_send_message(message: types.Message, bot: Bot, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    bot_user = await User.get(session, id=data["bot_user_id"])
    await bot.send_message(bot_user.id, message.text)
    await message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        reply_markup=common_kbs.custom_back_kb(cb=UserCallback(id=data["bot_user_id"], action=AdminAction.GET))
    )
    await state.clear()


@router.callback_query(UserCallback.filter(F.action == AdminAction.ADD_BALANCE))
async def admin_add_balance(call: types.CallbackQuery, callback_data: UserCallback, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("admin_add_balance")
    await state.update_data(user_id=callback_data.id)


@router.message(StateFilter("admin_add_balance"))
async def admin_add_balance(message: types.Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    user = await User.get(session, id=data["user_id"])
    if user:
        try:
            balance = float(message.text)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")
            return
        user.balance += balance
        await session.commit()
        await message.answer(
            f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {balance}",
            reply_markup=common_kbs.custom_back_kb(cb=UserCallback(id=user.id, action=AdminAction.GET))
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await state.clear()


@router.callback_query(UserCallback.filter(F.action == AdminAction.SUBTRACT_BALANCE))
async def admin_subtract_balance(call: types.CallbackQuery, callback_data: UserCallback, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("admin_subtract_balance")
    await state.update_data(user_id=callback_data.id)


@router.message(StateFilter("admin_subtract_balance"))
async def admin_subtract_balance(message: types.Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    user = await User.get(session, id=data["user_id"])
    if user:
        try:
            balance = float(message.text)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")
            return
        user.balance -= balance
        await session.commit()
        await message.answer(
            f"–° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å–ø–∏—Å–∞–Ω–æ {balance}",
            reply_markup=common_kbs.custom_back_kb(cb=UserCallback(id=user.id, action=AdminAction.GET))

        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await state.clear()


@router.callback_query(UserCallback.filter(F.action == AdminAction.CHANGE_SUBSCRIPTION_DURATION))
async def admin_change_subscription_duration(call: types.CallbackQuery, callback_data: UserCallback, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("admin_change_subscription_duration")
    await state.update_data(user_id=callback_data.id)


@router.message(StateFilter("admin_change_subscription_duration"))
async def admin_change_subscription_duration(
        message: types.Message,
        session: AsyncSession,
        account_dispatchers: dict[int, Dispatcher],
        state: FSMContext
):
    data = await state.get_data()
    user = await User.get(session, id=data["user_id"])
    if user:
        try:
            duration = int(message.text)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        user.subscription_duration = duration
        await session.commit()

        # await user.update_projects_accounts(session, account_dispatchers)
        await message.answer(
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {duration} –¥–Ω–µ–π",
            reply_markup=common_kbs.custom_back_kb(cb=UserCallback(id=user.id, action=AdminAction.GET))
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await state.clear()


# –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(UserCallback.filter(F.action == AdminAction.ADD_BAN))
async def admin_add_ban(
        call: types.CallbackQuery,
        session: AsyncSession,
        callback_data: UserCallback,
        state: FSMContext):
    user = await User.get(session, id=callback_data.id)

    if not user:
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    user.ban = not user.ban
    await session.commit()
    updated_user = await User.get(session, id=user.id)

    status_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if updated_user.ban else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    await call.message.answer(status_message)
    
    await state.clear()
    await state.set_state("admin_get_user")


@router.callback_query(Text("change_withdraw_sum"))
async def change_withdraw_sum(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("change_withdraw_sum")


@router.message(StateFilter("change_withdraw_sum"))
async def change_withdraw_sum(
        message: types.Message,
        session: AsyncSession,
        settings: Settings,
        state: FSMContext
):
    await state.clear()
    settings.bot.WITHDRAW_BALANCE = float(message.text)
    settings.dump()
    await message.answer(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )


@router.callback_query(Text("change_discount"))
async def change_discount(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("change_discount")


@router.message(StateFilter("change_discount"))
async def change_discount(
        message: types.Message,
        session: AsyncSession,
        settings: Settings,
        state: FSMContext
):
    await state.clear()
    settings.bot.SUBSCRIPTION_12_MONTH_DISCOUNT = int(message.text)
    settings.dump()
    await message.answer(
        "–°–∫–∏–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )


@router.callback_query(Text("update_bonus"))
async def update_bonus(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–æ–Ω—É—Å",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )
    await state.set_state("update_bonus")


@router.message(StateFilter("update_bonus"))
async def update_bonus(
        message: types.Message,
        session: AsyncSession,
        settings: Settings,
        state: FSMContext
):
    await state.clear()
    settings.bot.BONUS = float(message.text)
    settings.dump()
    await message.answer(
        "–ë–æ–Ω—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω",
        reply_markup=common_kbs.custom_back_kb(cb="admin")
    )


@router.message(Text("/create_old_users_from_csv"))
async def create_old_users_from_csv(
        message: types.Message,
        session: AsyncSession,
        settings: Settings,
        state: FSMContext
):
    await create_from_csv(session)
    await message.answer(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã",
    )
